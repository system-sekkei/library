AWSTemplateFormatVersion: "2010-09-09"
Description: "library vpc"
Parameters:
  Flavor:
    Type: String
    Default: library
  EnvironmentName:
    Type: String
    Default: development
    AllowedValues:
      - development
      - staging
      - production
  VpcAvailabilityZones:
    Type: CommaDelimitedList
    Default: "ap-northeast-1a,ap-northeast-1c"

Mappings:
  CiderBlockMap:
    development:
      VPC: 10.1.0.0/16
      PublicSubnet1: 10.1.11.0/24
      PublicSubnet2: 10.1.12.0/24
    staging:
      VPC: 10.2.0.0/16
      PublicSubnet1: 10.2.11.0/24
      PublicSubnet2: 10.2.12.0/24

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [CiderBlockMap, !Ref EnvironmentName, VPC]
      Tags:
        - Key: Flavor
          Value: !Ref Flavor
        - Key: Name
          Value: !Sub "${Flavor}-${EnvironmentName}-vpc"
  # RouteTable
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Flavor
          Value: !Ref Flavor
        - Key: Name
          Value: !Sub "${Flavor}-${EnvironmentName}-route-table"
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Flavor
          Value: !Ref Flavor
        - Key: Name
          Value: !Sub "${Flavor}-${EnvironmentName}-internet-gateway"
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteViaInternetGateway:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment # Attachした後でないとInternetGatewayと繋がらないため
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  # Subnet: ALBが使うので2つのAZが必要
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [CiderBlockMap, !Ref EnvironmentName, PublicSubnet1]
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !Ref VpcAvailabilityZones ]
      Tags:
        - Key: Flavor
          Value: !Ref Flavor
        - Key: Name
          Value: !Sub "${Flavor}-${EnvironmentName}-public-subnet-1"
  PublicSubnetAz1SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [CiderBlockMap, !Ref EnvironmentName, PublicSubnet2]
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !Ref VpcAvailabilityZones ]
      Tags:
        - Key: Flavor
          Value: !Ref Flavor
        - Key: Name
          Value: !Sub "${Flavor}-${EnvironmentName}-public-subnet-2"
  PublicSubnetAz2SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PublicSubnet2

  PublicALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${Flavor}-${EnvironmentName}-public-alb-security-group"
      GroupDescription: !Sub "${Flavor} ${EnvironmentName} public ALB SecurityGroup"
      VpcId: !ImportValue
        Fn::Sub: "${VpcStack}:VPC"
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: all egress allowed
          IpProtocol: -1
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: https ingress
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      Tags:
        - Key: Flavor
          Value: !Ref Flavor
        - Key: Name
          Value: !Sub "${Flavor}-${EnvironmentName}-public-alb-security-group"

Outputs:
  VPC:
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}:VPC"
  PublicSubnet1:
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${AWS::StackName}:PublicSubnet1"
  PublicSubnet2:
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub "${AWS::StackName}:PublicSubnet2"
  PublicALBSecurityGroup:
    Value: !Ref PublicALBSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}:PublicALBSecurityGroup"
